{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import * as winston from 'winston'\n\nconst logger: winston.Logger = winston.createLogger({\n    level: 'info',\n    format: winston.format.json(),\n    transports: [\n        //\n        // - Write all logs with importance level of `error` or less to `error.log`\n        // - Write all logs with importance level of `info` or less to `combined.log`\n        //\n        new winston.transports.File({ filename: 'error.log', level: 'error' }),\n        new winston.transports.File({ filename: 'combined.log' }),\n    ],\n})\n\nexport default {\n    setLevel(level: string) {\n        logger.configure({\n            level,\n        })\n    },\n\n    useLocalConfig() {\n        // If we're not in production then log to the `console` with the format:\n        // `${info.level}: ${info.message} JSON.stringify({ ...rest }) `\n        this.setLevel('debug')\n        \n        logger.add(\n            new winston.transports.Console({\n                format: winston.format.simple(),\n            })\n        )\n    },\n\n    info(message: string, ...meta: any[]) {\n        logger.info(message, this._getDefaultMeta(), ...meta)\n    },\n\n    error(message: string, ...meta: any[]) {\n        logger.error(message, this._getDefaultMeta(), ...meta)\n    },\n\n    warn(message: string, ...meta: any[]) {\n        logger.warn(message, this._getDefaultMeta(), ...meta)\n    },\n\n    debug(message: string, ...meta: any[]) {\n        logger.debug(message, this._getDefaultMeta(), ...meta)\n    },\n\n    log(message: string, level: string = 'debug', ...meta: any[]) {\n        logger.log(level, message, this._getDefaultMeta(), ...meta)\n    },\n    \n    _getDefaultMeta() {\n        return {\n            timestamp: new Date().toLocaleString('nl'),\n            service: process.env.SERVICE_NAME\n        }\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAyB;AAEzB,IAAM,SAAiC,qBAAa;AAAA,EAChD,OAAO;AAAA,EACP,QAAgB,eAAO,KAAK;AAAA,EAC5B,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,IAKR,IAAY,mBAAW,KAAK,EAAE,UAAU,aAAa,OAAO,QAAQ,CAAC;AAAA,IACrE,IAAY,mBAAW,KAAK,EAAE,UAAU,eAAe,CAAC;AAAA,EAC5D;AACJ,CAAC;AAED,IAAO,cAAQ;AAAA,EACX,SAAS,OAAe;AACpB,WAAO,UAAU;AAAA,MACb;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,iBAAiB;AAGb,SAAK,SAAS,OAAO;AAErB,WAAO;AAAA,MACH,IAAY,mBAAW,QAAQ;AAAA,QAC3B,QAAgB,eAAO,OAAO;AAAA,MAClC,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEA,KAAK,YAAoB,MAAa;AAClC,WAAO,KAAK,SAAS,KAAK,gBAAgB,GAAG,GAAG,IAAI;AAAA,EACxD;AAAA,EAEA,MAAM,YAAoB,MAAa;AACnC,WAAO,MAAM,SAAS,KAAK,gBAAgB,GAAG,GAAG,IAAI;AAAA,EACzD;AAAA,EAEA,KAAK,YAAoB,MAAa;AAClC,WAAO,KAAK,SAAS,KAAK,gBAAgB,GAAG,GAAG,IAAI;AAAA,EACxD;AAAA,EAEA,MAAM,YAAoB,MAAa;AACnC,WAAO,MAAM,SAAS,KAAK,gBAAgB,GAAG,GAAG,IAAI;AAAA,EACzD;AAAA,EAEA,IAAI,SAAiB,QAAgB,YAAY,MAAa;AAC1D,WAAO,IAAI,OAAO,SAAS,KAAK,gBAAgB,GAAG,GAAG,IAAI;AAAA,EAC9D;AAAA,EAEA,kBAAkB;AACd,WAAO;AAAA,MACH,YAAW,oBAAI,KAAK,GAAE,eAAe,IAAI;AAAA,MACzC,SAAS,QAAQ,IAAI;AAAA,IACzB;AAAA,EACJ;AACJ;","names":[]}